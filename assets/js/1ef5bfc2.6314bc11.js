"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5192],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>u});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),s=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=s(e.components);return n.createElement(d.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=s(a),u=r,m=c["".concat(d,".").concat(u)]||c[u]||h[u]||i;return a?n.createElement(m,o(o({ref:t},p),{},{components:a})):n.createElement(m,o({ref:t},p))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=c;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=a[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},4510:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var n=a(7462),r=(a(7294),a(3905));const i={sidebar_position:1},o="\ud83d\udcdf POI Radio",l={unversionedId:"graphcast/radios/poi-radio",id:"graphcast/radios/poi-radio",title:"\ud83d\udcdf POI Radio",description:"The source code for the POI Radio is available on GitHub and Docker builds are automatically published as GitHub Packages. POI Radio is also published as a Crate on Crates.io.",source:"@site/docs/graphcast/radios/poi-radio.md",sourceDirName:"graphcast/radios",slug:"/graphcast/radios/poi-radio",permalink:"/graphcast/radios/poi-radio",draft:!1,editUrl:"https://github.com/graphops/docs/edit/main/docs/graphcast/radios/poi-radio.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"gnSidebar",previous:{title:"\ud83e\uddd1\u200d\ud83d\udcbb Radio Development",permalink:"/graphcast/sdk/radio-dev"}},d={},s=[{value:"Introduction",id:"introduction",level:2},{value:"Getting Started",id:"getting-started",level:2},{value:"Registering your Graphcast ID",id:"registering-your-graphcast-id",level:3},{value:"Run with Docker",id:"run-with-docker",level:3},{value:"(or) Run with docker-compose",id:"or-run-with-docker-compose",level:3},{value:"(or) Run using a pre-built binary",id:"or-run-using-a-pre-built-binary",level:3},{value:"Configuration",id:"configuration",level:2},{value:"Mainnet",id:"mainnet",level:3},{value:"Testnet (Goerli)",id:"testnet-goerli",level:3},{value:"Monitoring the Radio",id:"monitoring-the-radio",level:3},{value:"How it works",id:"how-it-works",level:2},{value:"Fetching active allocations",id:"fetching-active-allocations",level:3},{value:"Gathering and comparing normalised POIs",id:"gathering-and-comparing-normalised-pois",level:3},{value:"Developing the POI Radio",id:"developing-the-poi-radio",level:2},{value:"Building the image using the Dockerfile locally",id:"building-the-image-using-the-dockerfile-locally",level:4},{value:"Prerequisites",id:"prerequisites",level:5},{value:"Running the POI Radio inside a Docker container",id:"running-the-poi-radio-inside-a-docker-container",level:5},{value:"Building POI Radio locally",id:"building-poi-radio-locally",level:3},{value:"Prerequisites",id:"prerequisites-1",level:4},{value:"Running the POI Radio natively",id:"running-the-poi-radio-natively",level:4}],p={toc:s};function h(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"-poi-radio"},"\ud83d\udcdf POI Radio"),(0,r.kt)("p",null,"The source code for the POI Radio is available ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/graphops/poi-radio"},"on GitHub")," and Docker builds are automatically published as ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/graphops/poi-radio/pkgs/container/poi-radio"},"GitHub Packages"),". POI Radio is also published as a Crate ",(0,r.kt)("a",{parentName:"p",href:"https://crates.io/crates/poi-radio"},"on Crates.io"),"."),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"The POI Radio is an optional component of the Graph Protocol Indexer Stack that leverages the Graphcast Network to cross-check subgraph data integrity with other participating Indexers."),(0,r.kt)("p",null,"In order for an Indexer to earn indexing rewards from the Protocol, valid Proofs of Indexing (POIs) must be posted on-chain regularly, proving that the Indexer has the correct data. Posting an invalid POI exposes the Indexer to the liability of a ",(0,r.kt)("a",{parentName:"p",href:"https://thegraph.com/docs/en/network/indexing/#what-are-disputes-and-where-can-i-view-them"},"Dispute")," and being slashed by the Protocol. This Radio provides Indexers peace of mind that their POIs are being continuously cross-checked against other participating Indexers. In the event that there is a POI discrepancy, the Radio acts as an early warning system, notifying the Indexer within minutes of the discrepancy occuring."),(0,r.kt)("p",null,"All POIs that are generated by the Radio are normalized, meaning they are hashed with a ",(0,r.kt)("inlineCode",{parentName:"p"},"0x0")," Indexer Address and can be compared between Indexers, all without being valid POIs that could be submitted on-chain for rewards. The Radio will group and weight all normalized POIs by the aggregate stake in GRT that is attesting to each. The normalized POI with the largest aggregate attesting stake is considered canonical and will be used for comparisons with your local Indexer POIs."),(0,r.kt)("p",null,"For security reasons, POI Radio needs an independent Graphcast ID linked to your Indexer account to operate. Your Graphcast ID is an Ethereum account that has been authorized to sign POI attestations on behalf of your Indexer. Follow instructions for registering your Graphcast ID below."),(0,r.kt)("h2",{id:"getting-started"},"Getting Started"),(0,r.kt)("h3",{id:"registering-your-graphcast-id"},"Registering your Graphcast ID"),(0,r.kt)("p",null,"The Graphcast Registry contract maps Graphcast IDs to Indexers in the Graph Protocol. You'll need to register a Graphcast ID that is authorized to sign messages on behalf of your Indexer in order to use Graphcast."),(0,r.kt)("p",null,"Here is a brief overview of the accounts you'll be interacting with:"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Account Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Indexer Account"),(0,r.kt)("td",{parentName:"tr",align:null},"The address associated with your Graph Protocol Indexer. This may be a Token Lock Contract address, or a multisig or EOA address.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Indexer Operator Account"),(0,r.kt)("td",{parentName:"tr",align:null},"An account you have registered as an Operator for your Indexer. You pass an Operator account into ",(0,r.kt)("inlineCode",{parentName:"td"},"indexer-agent"),". You can register multiple Operators for your Indexer in parallel.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Graphcast ID Account"),(0,r.kt)("td",{parentName:"tr",align:null},"An account that is used by Graphcast Radio instances to sign messages on behalf of your Indexer.")))),(0,r.kt)("p",null,"You'll need to use a registered ",(0,r.kt)("a",{parentName:"p",href:"https://thegraph.com/docs/en/network/indexing/#stake-in-the-protocol"},"Indexer Operator")," account for your Indexer to register a Graphcast ID."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"If you would prefer not to import the Operator account that you use with ",(0,r.kt)("inlineCode",{parentName:"p"},"indexer-agent")," into your wallet in order to register your Graphcast ID, you can generate and register a dedicated operator account for this purpose. After you have registered your Graphcast ID, you can deregister the dedicated operator if you desire.")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("a",{parentName:"li",href:"https://iancoleman.io/bip39/"},"Generate a new Ethereum account")," to act as your Graphcast ID, keeping the details safe"),(0,r.kt)("li",{parentName:"ol"},"Import your Indexer Operator private key into your wallet (e.g. MetaMask or Frame) in order to send a transaction to register your Graphcast ID"),(0,r.kt)("li",{parentName:"ol"},"Navigate to Etherscan (",(0,r.kt)("a",{parentName:"li",href:"https://etherscan.io/address/0x89f97698d6006f25570cd2e31737d3d22aedcbcf#writeProxyContract"},"mainnet registry"),", ",(0,r.kt)("a",{parentName:"li",href:"https://goerli.etherscan.io/address/0x26ebbA649FAa7b56FDB8DE9Ea17aF3504B76BFA0#writeProxyContract"},"testnet registry"),") in order to interact with the Graphcast Registry contract and register your Graphcast ID"),(0,r.kt)("li",{parentName:"ol"},"Call ",(0,r.kt)("inlineCode",{parentName:"li"},"setGraphcastIDFor(indexer_address, graphcast_id)"),", passing in your Indexer Address and Graphcast ID"),(0,r.kt)("li",{parentName:"ol"},"Submit your transaction and wait for it to be included in a block")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"Each Graphcast ID can be associated with a single Indexer. To revoke a Graphcast ID for an Indexer, call ",(0,r.kt)("inlineCode",{parentName:"p"},"setGraphcastIDFor(indexer_address, graphcast_id)")," with a Graphcast ID of ",(0,r.kt)("inlineCode",{parentName:"p"},"0x0")," using a registered Indexer Operator Account.")),(0,r.kt)("h3",{id:"run-with-docker"},"Run with Docker"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Pull the POI Radio image")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker pull ghcr.io/graphops/poi-radio:latest\n")),(0,r.kt)("ol",{start:2},(0,r.kt)("li",{parentName:"ol"},"Run the image, providing the required environment variables. Here's a sample mainnet configuration:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'docker run \\\n    -e GRAPHCAST_NETWORK="mainnet" \\\n    -e REGISTRY_SUBGRAPH="https://api.thegraph.com/subgraphs/name/hopeyen/graphcast-registry-mainnet" \\\n    -e NETWORK_SUBGRAPH="https://gateway.thegraph.com/network" \\\n    -e PRIVATE_KEY="GRAPHCAST_ID_PRIVATE_KEY" \\\n    -e GRAPH_NODE_STATUS_ENDPOINT="http://graph-node:8030/graphql" \\\n    -e RUST_LOG="warn,hyper=warn,graphcast_sdk=info,poi_radio=info" \\\n    ghcr.io/graphops/poi-radio:latest\n')),(0,r.kt)("h3",{id:"or-run-with-docker-compose"},"(or) Run with docker-compose"),(0,r.kt)("p",null,"You can append this service definition to your ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose")," manifest and customise the definitions:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'services:\n  # ... your other service definitions\n  poi-radio:\n    image: ghcr.io/graphops/poi-radio:latest\n    container_name: poi-radio\n    restart: unless-stopped\n    environment:\n      GRAPHCAST_NETWORK: "mainnet"\n      REGISTRY_SUBGRAPH: "https://api.thegraph.com/subgraphs/name/hopeyen/graphcast-registry-mainnet"\n      NETWORK_SUBGRAPH: "https://gateway.thegraph.com/network"\n      PRIVATE_KEY: "GRAPHCAST_ID_PRIVATE_KEY"\n      GRAPH_NODE_STATUS_ENDPOINT: "http://graph-node:8030/graphql"\n      RUST_LOG: "warn,hyper=warn,graphcast_sdk=info,poi_radio=info"\n    logging:\n      driver: local\n')),(0,r.kt)("h3",{id:"or-run-using-a-pre-built-binary"},"(or) Run using a pre-built binary"),(0,r.kt)("p",null,"We also provide pre-built binaries for Ubuntu and MacOS, which you can find in the ",(0,r.kt)("inlineCode",{parentName:"p"},"Assets")," section on each release in the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/graphops/poi-radio/releases"},"releases page")," on Github. Simply download the binary, make it executable (",(0,r.kt)("inlineCode",{parentName:"p"},"chmod a+x ./poi-radio-{TAG}-{SYSTEM}"),") and then run it (using ",(0,r.kt)("inlineCode",{parentName:"p"},"./poi-radio-{TAG}-{SYSTEM}"),")."),(0,r.kt)("h2",{id:"configuration"},"Configuration"),(0,r.kt)("p",null,"In the configuration table below is the full list of environment variables you can set, along with example values."),(0,r.kt)("h3",{id:"mainnet"},"Mainnet"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"PRIVATE_KEY")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"GRAPH_NODE_STATUS_ENDPOINT")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"http://localhost:8030/graphql"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"REGISTRY_SUBGRAPH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"https://thegraph.com/hosted-service/subgraph/hopeyen/graphcast-registry-mainnet"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NETWORK_SUBGRAPH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"https://gateway.thegraph.com/network"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"GRAPHCAST_NETWORK")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"mainnet"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"COLLECT_MESSAGE_DURATION")," (Optional)"),(0,r.kt)("td",{parentName:"tr",align:null},"Defaults to 30 seconds")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"WAKU_HOST")," (Optional)"),(0,r.kt)("td",{parentName:"tr",align:null},"Defaults to ",(0,r.kt)("inlineCode",{parentName:"td"},"127.0.0.1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"WAKU_PORT")," (Optional)"),(0,r.kt)("td",{parentName:"tr",align:null},"Defaults to ",(0,r.kt)("inlineCode",{parentName:"td"},"8546"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"WAKU_NODE_KEY")," (Optional)"),(0,r.kt)("td",{parentName:"tr",align:null},"Defaults to ",(0,r.kt)("inlineCode",{parentName:"td"},"None"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"BOOT_NODE_ADDRESSES")," (Optional)"),(0,r.kt)("td",{parentName:"tr",align:null},'"addr1, addr2, addr3" (defaults to ',(0,r.kt)("inlineCode",{parentName:"td"},"None"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SLACK_TOKEN")," (Optional)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"xoxp-0123456789-0123456789-0123456789-0123456789")," (defaults to ",(0,r.kt)("inlineCode",{parentName:"td"},"None"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SLACK_WEBHOOK")," (Optional)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"https://hooks.slack.com/services/<ID>/<ID>/<TOKEN>")," (defaults to ",(0,r.kt)("inlineCode",{parentName:"td"},"None"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"RUST_LOG")," (Optional)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"graphcast_sdk=debug,poi_radio=debug"),", defaults to ",(0,r.kt)("inlineCode",{parentName:"td"},"info")," for everything")))),(0,r.kt)("h3",{id:"testnet-goerli"},"Testnet (Goerli)"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Example"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"PRIVATE_KEY")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"GRAPH_NODE_STATUS_ENDPOINT")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"http://localhost:8030/graphql")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"http://host.docker.internal:8030/graphql")," for Docker")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"REGISTRY_SUBGRAPH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"https://api.thegraph.com/subgraphs/name/hopeyen/graphcast-registry-goerli"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NETWORK_SUBGRAPH")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"https://gateway.testnet.thegraph.com/network"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"GRAPHCAST_NETWORK")),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"testnet"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"COLLECT_MESSAGE_DURATION")," (Optional)"),(0,r.kt)("td",{parentName:"tr",align:null},"Defaults to 30 seconds")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"WAKU_HOST")," (Optional)"),(0,r.kt)("td",{parentName:"tr",align:null},"Defaults to ",(0,r.kt)("inlineCode",{parentName:"td"},"127.0.0.1"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"WAKU_PORT")," (Optional)"),(0,r.kt)("td",{parentName:"tr",align:null},"Defaults to ",(0,r.kt)("inlineCode",{parentName:"td"},"8546"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"WAKU_NODE_KEY")," (Optional)"),(0,r.kt)("td",{parentName:"tr",align:null},"Defaults to ",(0,r.kt)("inlineCode",{parentName:"td"},"None"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"BOOT_NODE_ADDRESSES")," (Optional)"),(0,r.kt)("td",{parentName:"tr",align:null},'"addr1, addr2, addr3" (defaults to ',(0,r.kt)("inlineCode",{parentName:"td"},"None"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SLACK_TOKEN")," (Optional)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"xoxp-0123456789-0123456789-0123456789-0123456789")," (defaults to ",(0,r.kt)("inlineCode",{parentName:"td"},"None"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SLACK_WEBHOOK")," (Optional)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"https://hooks.slack.com/services/<ID>/<ID>/<TOKEN>")," (defaults to ",(0,r.kt)("inlineCode",{parentName:"td"},"None"),")")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"RUST_LOG")," (Optional)"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"graphcast_sdk=debug,poi_radio=debug"),", defaults to ",(0,r.kt)("inlineCode",{parentName:"td"},"info")," for everything")))),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"SLACK_TOKEN")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"SLACK_WEBHOOK")," are used for POI divergence notifications in a Slack channel."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"WAKU_HOST")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"WAKU_PORT")," specify where the Graphcast node (included in all Radios) runs. If you want to run multiple Radios, or multiple instances of the same Radio, you should run them on different ports."),(0,r.kt)("p",null,"If you want to customize the log level, you can toggle ",(0,r.kt)("inlineCode",{parentName:"p"},"RUST_LOG")," environment variable. Here's an example configuration to get more verbose logging:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'RUST_LOG="warn,hyper=warn,graphcast_sdk=debug,poi_radio=debug"\n')),(0,r.kt)("h3",{id:"monitoring-the-radio"},"Monitoring the Radio"),(0,r.kt)("p",null,"If the Radio operator has set up a Slack Bot integration and the Radio finds a POI mismatch, it sends alerts to the designated channel. The operator can also inspect the logs to see if the Radio is functioning properly, if it's sending and receiving messages, if it's comparing normalised POIs, if there is a found POI mismatch, etc."),(0,r.kt)("p",null,"Support for Prometheus metrics and Grafana dashboards is coming soon!"),(0,r.kt)("h2",{id:"how-it-works"},"How it works"),(0,r.kt)("h3",{id:"fetching-active-allocations"},"Fetching active allocations"),(0,r.kt)("p",null,"The POI Radio is responsible for reading active allocations of the Radio operator's corresponding Indexer. It periodically polls the Graph Node for new blocks on all relevant networks and constructs Graphcast topics on each allocation identified by subgraph deployment IPFS hash."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"The relevant networks are those corresponding to the subgraphs that have active allocations.")),(0,r.kt)("p",null,"The Radio fetches new active allocations at a set interval (currently set to 2 minutes) to ensure that it is processing the latest information. Chainheads for these networks are updated with data from the Graph Node, and the Radio ensures that it is always using the latest chainhead when processing messages."),(0,r.kt)("h3",{id:"gathering-and-comparing-normalised-pois"},"Gathering and comparing normalised POIs"),(0,r.kt)("p",null,"At a given interval, the Radio fetches the normalised POI for each deployment. This interval is defined in blocks different for each network."),(0,r.kt)("p",null,"It then saves those nPOIs in an in-memory map. These nPOIs are referred to as ",(0,r.kt)("em",{parentName:"p"},"local")," POIs since they are generated by the Radio. As other Indexers running the Radio start doing the same, messages start propagating through the network. The Radio handles each message and adds the POI from it in another in-memory map. These POIs are referred to as ",(0,r.kt)("em",{parentName:"p"},"remote")," POIs since they are received from other network participants."),(0,r.kt)("p",null,"The messages include a nonce (UNIX timestamp), block number, signature (used to derive the sender's on-chain Indexer address) and network. Before saving an entry to the map, the Radio operator verifies through the Graph network subgraph for the sender's on-chain identity and amount of tokens staked, which is used during comparisons later on."),(0,r.kt)("p",null,"At another interval, the Radio compares the local POIs with the collected remote ones. That interval can be set by the operator, the default currently is 30 seconds. The remote POIs are sorted so that for each subgraph (on each block), the POI that is backed by the most on-chain stake is selected. This means that the combined stake of all Indexers that attested to it is considered, not just the highest staking Indexer. The top POI is then compared with the local POI for that subgraph at that block to determine consensus."),(0,r.kt)("p",null,"After a successful comparison, the attestations that have been checked are removed from the store."),(0,r.kt)("h2",{id:"developing-the-poi-radio"},"Developing the POI Radio"),(0,r.kt)("h4",{id:"building-the-image-using-the-dockerfile-locally"},"Building the image using the Dockerfile locally"),(0,r.kt)("p",null,"If you want to make any changes to the POI Radio codebase, you can use this option."),(0,r.kt)("h5",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Clone this repo and ",(0,r.kt)("inlineCode",{parentName:"li"},"cd")," into it"),(0,r.kt)("li",{parentName:"ol"},"Create a ",(0,r.kt)("inlineCode",{parentName:"li"},".env")," file that includes at least the required environment variables. To see the full list of environment variables you can provide, check out the ",(0,r.kt)("a",{parentName:"li",href:"#configuration"},"Configuration")," section.")),(0,r.kt)("h5",{id:"running-the-poi-radio-inside-a-docker-container"},"Running the POI Radio inside a Docker container"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose up -d\n")),(0,r.kt)("h3",{id:"building-poi-radio-locally"},"Building POI Radio locally"),(0,r.kt)("p",null,"To have full control over the POI Radio code and run it directly on your machine (without Docker) you can use this option."),(0,r.kt)("h4",{id:"prerequisites-1"},"Prerequisites"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Clone this repo and ",(0,r.kt)("inlineCode",{parentName:"li"},"cd")," into it"),(0,r.kt)("li",{parentName:"ol"},"Make sure you have the following installed:")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.rust-lang.org/tools/install"},"Rust")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://go.dev/doc/install"},"Go")),(0,r.kt)("li",{parentName:"ul"},"Build tools (e.g. the ",(0,r.kt)("inlineCode",{parentName:"li"},"build-essentials")," package for Debian-based Linux distributions or ",(0,r.kt)("a",{parentName:"li",href:"https://mac.install.guide/commandlinetools/index.html"},"Xcode Command Line Tools")," for MacOS)"),(0,r.kt)("li",{parentName:"ul"},"C compiler (e.g. the ",(0,r.kt)("inlineCode",{parentName:"li"},"clang")," package for Debian-based Linux distribution or ",(0,r.kt)("a",{parentName:"li",href:"https://mac.install.guide/commandlinetools/index.html"},"Xcode Command Line Tools")," for MacOS)"),(0,r.kt)("li",{parentName:"ul"},"OpenSSL (e.g. the ",(0,r.kt)("inlineCode",{parentName:"li"},"libssl-dev")," package for Debian-based Linux distribution or ",(0,r.kt)("inlineCode",{parentName:"li"},"openssl")," for MacOS)"),(0,r.kt)("li",{parentName:"ul"},"PostreSQL libraries and headers (e.g. the ",(0,r.kt)("inlineCode",{parentName:"li"},"libpq-dev")," package for Debian-based Linux distribution or ",(0,r.kt)("inlineCode",{parentName:"li"},"postgresql")," for MacOS)")),(0,r.kt)("ol",{start:3},(0,r.kt)("li",{parentName:"ol"},"You have ",(0,r.kt)("strong",{parentName:"li"},"Graph Node")," syncing your indexer's on-chain allocations."),(0,r.kt)("li",{parentName:"ol"},"You have created a ",(0,r.kt)("inlineCode",{parentName:"li"},".env")," file that includes at least the required environment variables. To see the full list of environment variables you can provide, check out the ",(0,r.kt)("a",{parentName:"li",href:"#configuration"},"Configuration")," section.")),(0,r.kt)("h4",{id:"running-the-poi-radio-natively"},"Running the POI Radio natively"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cargo run\n")))}h.isMDXComponent=!0}}]);