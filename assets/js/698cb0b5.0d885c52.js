"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6245],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=d(n),c=r,h=m["".concat(p,".").concat(c)]||m[c]||u[c]||o;return n?a.createElement(h,l(l({ref:t},s),{},{components:n})):a.createElement(h,l({ref:t},s))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=c;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i[m]="string"==typeof e?e:r,l[1]=i;for(var d=2;d<o;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},4736:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const o={sidebar_position:3},l="One-shot CLI",i={unversionedId:"graphcast/radios/one-shot",id:"graphcast/radios/one-shot",title:"One-shot CLI",description:"The source code for the one-shot CLI is available on GitHub as a member of the Subgraph Radio workspace.",source:"@site/docs/graphcast/radios/one-shot.md",sourceDirName:"graphcast/radios",slug:"/graphcast/radios/one-shot",permalink:"/graphcast/radios/one-shot",draft:!1,editUrl:"https://github.com/graphops/docs/edit/main/docs/graphcast/radios/one-shot.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"gnSidebar",previous:{title:"Subgraph Radio",permalink:"/graphcast/radios/subgraph-radio"}},p={},d=[{value:"Introduction",id:"introduction",level:2}],s={toc:d},m="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"one-shot-cli"},"One-shot CLI"),(0,r.kt)("p",null,"The source code for the one-shot CLI is available ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/graphops/subgraph-radio/tree/dev/one-shot"},"on GitHub")," as a member of the Subgraph Radio workspace."),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,"The one-shot CLI enables sending one-off messages. Currently, its default behaviour is to construct and send a message of type ",(0,r.kt)("inlineCode",{parentName:"p"},"VersionUpgradeMessage"),", which is used for the ",(0,r.kt)("a",{parentName:"p",href:"graphcast/design-principles#subgraph-versioning"},"Subgraph Versioning functionality")," of Subgraph Radio."),(0,r.kt)("p",null,"The one-shot CLI is configured using config variables. You will need to prepare the following config variables (either as env variables or passing CLI args when running the CLI):"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description and Examples"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"PRIVATE_KEY")),(0,r.kt)("td",{parentName:"tr",align:null},"Private key to the Graphcast ID wallet (precendence over mnemonics).",(0,r.kt)("br",null),"Example: ",(0,r.kt)("inlineCode",{parentName:"td"},"PRIVATE_KEY=YOUR_PRIVATE_KEY"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"MNEMONIC")),(0,r.kt)("td",{parentName:"tr",align:null},"Mnemonic to the Graphcast ID wallet (first address of the wallet is used; Only one of private key or mnemonic is needed).",(0,r.kt)("br",null),"Example: ",(0,r.kt)("inlineCode",{parentName:"td"},"MNEMONIC=YOUR_MNEMONIC"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"GRAPH_ACCOUNT")),(0,r.kt)("td",{parentName:"tr",align:null},"Graph account corresponding to Graphcast operator.",(0,r.kt)("br",null),"Example: ",(0,r.kt)("inlineCode",{parentName:"td"},"GRAPH_ACCOUNT=YOUR_GRAPH_ACCOUNT"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"REGISTRY_SUBGRAPH")),(0,r.kt)("td",{parentName:"tr",align:null},"Subgraph endpoint to the Graphcast Registry.",(0,r.kt)("br",null),"Default: ",(0,r.kt)("inlineCode",{parentName:"td"},"https://api.thegraph.com/subgraphs/name/hopeyen/graphcast-registry-goerli"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NETWORK_SUBGRAPH")),(0,r.kt)("td",{parentName:"tr",align:null},"Subgraph endpoint to The Graph network subgraph.",(0,r.kt)("br",null),"Default: ",(0,r.kt)("inlineCode",{parentName:"td"},"https://api.thegraph.com/subgraphs/name/graphprotocol/graph-network-goerli"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"GRAPHCAST_NETWORK")),(0,r.kt)("td",{parentName:"tr",align:null},"Supported Graphcast networks: mainnet, testnet.",(0,r.kt)("br",null),"Default: ",(0,r.kt)("inlineCode",{parentName:"td"},"testnet"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"IDENTIFIER")),(0,r.kt)("td",{parentName:"tr",align:null},"Subgraph deployment hash is used to be the message content identifier.",(0,r.kt)("br",null),"Example: ",(0,r.kt)("inlineCode",{parentName:"td"},"IDENTIFIER=YOUR_IDENTIFIER"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"NEW_HASH")),(0,r.kt)("td",{parentName:"tr",align:null},"Subgraph deployment hash for the upgrade version of the subgraph.",(0,r.kt)("br",null),"Example: ",(0,r.kt)("inlineCode",{parentName:"td"},"NEW_HASH=YOUR_NEW_HASH"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SUBGRAPH_ID")),(0,r.kt)("td",{parentName:"tr",align:null},"Subgraph id shared by the old and new deployment.",(0,r.kt)("br",null),"Example: ",(0,r.kt)("inlineCode",{parentName:"td"},"SUBGRAPH_ID=YOUR_SUBGRAPH_ID"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"INDEX_NETWORK")),(0,r.kt)("td",{parentName:"tr",align:null},"Subgraph id shared by the old and new deployment.",(0,r.kt)("br",null),"Example: ",(0,r.kt)("inlineCode",{parentName:"td"},"INDEX_NETWORK=YOUR_INDEX_NETWORK"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"MIGRATION_TIME")),(0,r.kt)("td",{parentName:"tr",align:null},"UNIX timestamp that the developer plan on migrating the usage.",(0,r.kt)("br",null),"Example: ",(0,r.kt)("inlineCode",{parentName:"td"},"MIGRATION_TIME=YOUR_MIGRATION_TIME"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ID_VALIDATION")),(0,r.kt)("td",{parentName:"tr",align:null},"Identity validation mechanism for message signers (options: no-check, valid-address, graphcast-registered, graph-network-account, registered-indexer, indexer).",(0,r.kt)("br",null),"Example: ",(0,r.kt)("inlineCode",{parentName:"td"},"ID_VALIDATION=valid-address"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LOG_LEVEL")),(0,r.kt)("td",{parentName:"tr",align:null},"Logging configuration to set as RUST_LOG.",(0,r.kt)("br",null),"Default: ",(0,r.kt)("inlineCode",{parentName:"td"},"info"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LOG_FORMAT")),(0,r.kt)("td",{parentName:"tr",align:null},"Support logging formats: pretty, json, full, compact.",(0,r.kt)("br",null),"Default: ",(0,r.kt)("inlineCode",{parentName:"td"},"pretty"))))),(0,r.kt)("p",null,"The one-shot CLI code is very extensible and could be altered to send any kind of Graphcast-compatible message to the network."))}u.isMDXComponent=!0}}]);