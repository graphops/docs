"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1310],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>g});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function p(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var d=n.createContext({}),u=function(e){var t=n.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},s=function(e){var t=u(e.components);return n.createElement(d.Provider,{value:t},e.children)},i="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),i=u(a),m=r,g=i["".concat(d,".").concat(m)]||i[m]||c[m]||o;return a?n.createElement(g,l(l({ref:t},s),{},{components:a})):n.createElement(g,l({ref:t},s))}));function g(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,l=new Array(o);l[0]=m;var p={};for(var d in t)hasOwnProperty.call(t,d)&&(p[d]=t[d]);p.originalType=e,p[i]="string"==typeof e?e:r,l[1]=p;for(var u=2;u<o;u++)l[u]=a[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},5616:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>p,toc:()=>u});var n=a(7462),r=(a(7294),a(3905));const o={},l="Upgrading Kubernetes with kubeadm",p={unversionedId:"launchpad/advanced-tutorials/kubeadm-upgrade-nodes",id:"launchpad/advanced-tutorials/kubeadm-upgrade-nodes",title:"Upgrading Kubernetes with kubeadm",description:"In this guide we will use as an example upgrading from kubernetes v1.28.1 to v1.28.3",source:"@site/docs/launchpad/advanced-tutorials/kubeadm-upgrade-nodes.md",sourceDirName:"launchpad/advanced-tutorials",slug:"/launchpad/advanced-tutorials/kubeadm-upgrade-nodes",permalink:"/launchpad/advanced-tutorials/kubeadm-upgrade-nodes",draft:!1,editUrl:"https://github.com/graphops/docs/edit/main/docs/launchpad/advanced-tutorials/kubeadm-upgrade-nodes.md",tags:[],version:"current",frontMatter:{},sidebar:"launchpadSidebar",previous:{title:"Upgrading Kubernetes ClusterConfig with kubeadm",permalink:"/launchpad/advanced-tutorials/kubeadm-upgrade-cluster-config"},next:{title:"Kubernetes Guide - Bootstrapping with Kubeadm",permalink:"/launchpad/advanced-tutorials/kubernetes-create-cluster-with-kubeadm"}},d={},u=[{value:"Upgrade Control-Plane Nodes",id:"upgrade-control-plane-nodes",level:2},{value:"Upgrade remaining Control-Plane Nodes",id:"upgrade-remaining-control-plane-nodes",level:2},{value:"Upgrade Worker Nodes",id:"upgrade-worker-nodes",level:2}],s={toc:u},i="wrapper";function c(e){let{components:t,...a}=e;return(0,r.kt)(i,(0,n.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"upgrading-kubernetes-with-kubeadm"},"Upgrading Kubernetes with kubeadm"),(0,r.kt)("p",null,"In this guide we will use as an example upgrading from kubernetes v1.28.1 to v1.28.3"),(0,r.kt)("p",null,"The the control-plane nodes must be upgraded first, followed by the worker nodes."),(0,r.kt)("h2",{id:"upgrade-control-plane-nodes"},"Upgrade Control-Plane Nodes"),(0,r.kt)("p",null,"Pick a control-plane node to be the first to upgrade, followed by:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"1:")," Upgrading kubeadm and kubectl to the latest patch version of the desired major version:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"apt-get update\napt-mark unhold kubeadm\napt-get install -y kubeadm='1.28.3-*'\napt-mark hold kubeadm\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"2:")," Verify the upgrade plan:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubeadm upgrade plan v1.28.3\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"3:")," Drain the node:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"kubectl drain <node-name> --ignore-daemonsets\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"4:")," Perform the upgrade:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubeadm upgrade apply v1.28.3\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"5:")," Upgrade the node's CRI-O or other container runtime to an appropriate version if need be. For CRI-O that would be changing the minor version in the repositories added to ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/apt/sources.list.d")," and then running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"apt-get update\napt-get install cri-o cri-o-runc\nsystemctl daemon-reload\nsystemctl restart crio\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"6:")," Upgrade kubelet and kubectl"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"apt-get update\napt-mark unhold kubelet\napt-mark unhold kubectl\napt-get install -y kubelet='1.28.3-*'\napt-get install -y kubectl='1.28.3-*'\napt-mark hold kubelet\napt-mark hold kubectl\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"7:")," Restart kubelet"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"systemctl daemon-reload\nsystemctl restart kubelet\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"8:")," Uncordon the node"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"kubectl uncordon <node-name>\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"9:")," Possibly, upgrade CNI. Particularly if it's a minor version upgrade there may be a need to update the CNI to a new version as well according to the vendor's release notes for the upgrade process"),(0,r.kt)("h2",{id:"upgrade-remaining-control-plane-nodes"},"Upgrade remaining Control-Plane Nodes"),(0,r.kt)("p",null,"For the remaining control-plane nodes, execute steps 1 to 8, one at a time but:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"step 2 is skipped, no need to plan the upgrade anymore"),(0,r.kt)("li",{parentName:"ul"},"step 4 is replaced by:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubeadm upgrade node\n")),(0,r.kt)("h2",{id:"upgrade-worker-nodes"},"Upgrade Worker Nodes"),(0,r.kt)("p",null,"After all the control-plane nodes are upgraded, it's time to upgrade your worker nodes by following the previous steps from 1 to 8 but:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"step 2 is skipped"),(0,r.kt)("li",{parentName:"ul"},"step 4 is replaced by:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"kubeadm upgrade node\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note"),": You can upgrade as many worker nodes in parallel as you see fit and/or find adequate to your availability requirements, as the nodes being upgraded will be drained from workloads."))}c.isMDXComponent=!0}}]);