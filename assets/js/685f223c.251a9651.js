"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[9421],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>m});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),l=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=l(a),g=r,m=u["".concat(p,".").concat(g)]||u[g]||d[g]||i;return a?n.createElement(m,o(o({ref:t},c),{},{components:a})):n.createElement(m,o({ref:t},c))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=g;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[u]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=a[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}g.displayName="MDXCreateElement"},1304:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var n=a(7462),r=(a(7294),a(3905));const i={},o="Overview of High Availability in PostgreSQL",s={unversionedId:"launchpad/guides/postgresql_ha",id:"launchpad/guides/postgresql_ha",title:"Overview of High Availability in PostgreSQL",description:"This guide is currently under development. We will be expanding it shortly to include additional concepts and detailed instructions. Stay tuned for updates!",source:"@site/docs/launchpad/guides/postgresql_ha.md",sourceDirName:"launchpad/guides",slug:"/launchpad/guides/postgresql_ha",permalink:"/launchpad/guides/postgresql_ha",draft:!1,editUrl:"https://github.com/graphops/docs/edit/main/docs/launchpad/guides/postgresql_ha.md",tags:[],version:"current",frontMatter:{},sidebar:"launchpadSidebar",previous:{title:"Deploying a Monitoring stack with HA",permalink:"/launchpad/guides/monitoring-stack-with-HA"},next:{title:"Considerations for Kubernetes installation using FCOS",permalink:"/launchpad/advanced/advanced-kubernetes"}},p={},l=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Configuring Postgresql with Zalando&#39;s Operator",id:"configuring-postgresql-with-zalandos-operator",level:2},{value:"Implementing WAL Archiving and Base Backups",id:"implementing-wal-archiving-and-base-backups",level:2}],c={toc:l},u="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(u,(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"overview-of-high-availability-in-postgresql"},"Overview of High Availability in PostgreSQL"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"This guide is currently under development. We will be expanding it shortly to include additional concepts and detailed instructions. Stay tuned for updates!")),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"A fully functional working Kubernetes cluster."),(0,r.kt)("li",{parentName:"ul"},"Object storage buckets for WAL (Write-Ahead Logs) archiving and base backups.")),(0,r.kt)("h2",{id:"configuring-postgresql-with-zalandos-operator"},"Configuring Postgresql with Zalando's Operator"),(0,r.kt)("p",null,"Launchpad leverages the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/zalando/postgres-operator"},"Zalando postgres-operator")," for seamless creation and management of ",(0,r.kt)("a",{parentName:"p",href:"https://www.postgresql.org/"},"PostgreSQL")," databases within Kubernetes, facilitating highly-available clusters with ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/zalando/patroni"},"Patroni"),". PostgreSQL is a requirement for storing indexer metadata and subgraph data when running an indexer. Configuration is streamlined through Postgres manifests (CRDs), enhancing CI/CD pipeline integration by removing the need for direct Kubernetes API access and promoting infrastructure-as-code practices."),(0,r.kt)("p",null,"Following the deployment of the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/graphops/launchpad-namespaces/blob/main/postgres-operator/README.md"},(0,r.kt)("inlineCode",{parentName:"a"},"postgres-operator")," namespace"),", you're set to initiate PostgreSQL database creation."),(0,r.kt)("p",null,"The ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/graphops/launchpad-namespaces/blob/main/graph/README.md"},(0,r.kt)("inlineCode",{parentName:"a"},"graph")," namespace")," is preconfigured to deploy ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/graphops/launchpad-namespaces/blob/main/graph/values/_common/graph-database.yaml"},"one replica PostgreSQL")," for ",(0,r.kt)("inlineCode",{parentName:"p"},"subgraph-data")," and one for ",(0,r.kt)("inlineCode",{parentName:"p"},"indexer-data"),". Adjust the ",(0,r.kt)("inlineCode",{parentName:"p"},"numberOfInstances")," in your Helmfile to modify replication levels."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"graph-database:\n    values:\n        resources:\n            postgres-cr-primary-subgraph-data:\n                spec:\n                    numberOfInstances: 3\n")),(0,r.kt)("p",null,"This setup establishes a primary instance for both writes and reads, with two read-only replicas. ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/zalando/patroni/blob/master/docs/kubernetes.rst"},"Patroni")," automates the failover process, promoting a replica to primary in case of primary failure."),(0,r.kt)("p",null,"The data between servers is replicated through WAL(Write-Ahead Logs) streaming replication which allows for changes to be streamed in real-time or near real-time to replicas. By first recording changes in the Write-Ahead Logging (WAL) system instead of directly applying every change to the disk immediately, PostgreSQL enhances performance by batching disk writes and minimizing I/O operations. Another benefit of using WAL is that in case of system failure, the database can be rebuilt by replaying these entries."),(0,r.kt)("h2",{id:"implementing-wal-archiving-and-base-backups"},"Implementing WAL Archiving and Base Backups"),(0,r.kt)("p",null,"By archiving the WAL data we can support reverting to any time instant covered by the available WAL data: we simply install a prior base backup of the database, and replay the WAL just as far as the desired time. "),(0,r.kt)("p",null,"While ",(0,r.kt)("inlineCode",{parentName:"p"},"archive_mode")," is enabled by default, it requires specific configurations for functionality, including setting ",(0,r.kt)("inlineCode",{parentName:"p"},"AWS_ENDPOINT")," and providing valid bucket credentials. Verify ",(0,r.kt)("inlineCode",{parentName:"p"},"archive_mode")," using ",(0,r.kt)("inlineCode",{parentName:"p"},"patronictl edit-config")," within your database pod. To configure ",(0,r.kt)("inlineCode",{parentName:"p"},"AWS_ENDPOINT")," for archiving and backups, create a ",(0,r.kt)("inlineCode",{parentName:"p"},"postgres-env-config")," ConfigMap:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'kind: ConfigMap\napiVersion: v1\nmetadata:\n    name: postgres-env-config\n    namespace: postgres-operator # any namespace can be used\ndata:\n    AWS_ENDPOINT: http://your-object-storage-endpoint.com\n    AWS_S3_FORCE_PATH_STYLE: "true" # needed if your object storage solution uses path style bucket naming convention instead of DNS ie. Ceph\n    USE_WALG_BACKUP: "true"\n    USE_WALG_RESTORE: "true"\n    WALG_DISABLE_S3_SSE: "true"\n    BACKUP_NUM_TO_RETAIN: "4"\n    BACKUP_SCHEDULE: "00 02 * * sun"\n    WAL_BUCKET_SCOPE_PREFIX: ""\n    WAL_BUCKET_SCOPE_SUFFIX: ""\n')),(0,r.kt)("p",null,"Ensure your databases are equipped with the necessary credentials for WAL file storage:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"graph-database:\n    values:\n        resources:\n            postgres-cr-primary-subgraph-data:\n              spec:\n                env:\n                  - name: WAL_S3_BUCKET\n                    value: <name-of-your-bucket>\n                  - name: AWS_ACCESS_KEY_ID\n                    valueFrom:\n                      secretKeyRef:\n                        name: subgraph-database-bucket-secret\n                        key: AWS_ACCESS_KEY_ID\n                  - name: AWS_SECRET_ACCESS_KEY\n                    valueFrom:\n                      secretKeyRef:\n                        name: subgraph-database-bucket-secret\n                        key: AWS_SECRET_ACCESS_KEY\n                  - name: BACKUP_NUM_TO_RETAIN\n                    value: \"2\"\n                  - name: BACKUP_SCHEDULE\n                    value: '00 00 * * sun'\n")))}d.isMDXComponent=!0}}]);